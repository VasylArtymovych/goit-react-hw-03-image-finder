{"ast":null,"code":"var _jsxFileName = \"/Users/vasyerim/Desktop/GitHub/goit-react-hw-03-phonebook/src/components/ContactForm/ContactForm.jsx\";\nimport React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Formik, Form } from 'formik';\nimport { Label, Input, Button } from './ContactForm.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  name: '',\n  number: ''\n};\n\nclass ContactForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...INITIAL_STATE\n    };\n    this.inputNameId = nanoid(12);\n    this.inputNumberId = nanoid(12);\n\n    this.inputChangeHandler = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.submitHandler = (values, action) => {// event.preventDefault();\n      // const contact = {id: nanoid(), name: this.state.name, number: this.state.number};\n      // this.props.addContact(contact);\n      // this.resetForm();\n    };\n\n    this.resetForm = () => {\n      this.setState({ ...INITIAL_STATE\n      });\n    };\n  }\n\n  render() {\n    const {\n      name,\n      number\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: INITIAL_STATE,\n      onSubmit: this.submitHandler,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          htmlFor: this.inputNameId,\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: this.inputNameId,\n          type: \"text\",\n          name: \"name\",\n          value: name,\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true,\n          onChange: this.inputChangeHandler,\n          placeholder: \"full name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          htmlFor: this.inputNumberId,\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: this.inputNumberId,\n          type: \"tel\",\n          name: \"number\",\n          value: number,\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true,\n          onChange: this.inputChangeHandler,\n          placeholder: \"tellephone number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;\nexport default ContactForm;","map":{"version":3,"sources":["/Users/vasyerim/Desktop/GitHub/goit-react-hw-03-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["React","Component","nanoid","Formik","Form","Label","Input","Button","INITIAL_STATE","name","number","ContactForm","state","inputNameId","inputNumberId","inputChangeHandler","event","value","target","setState","submitHandler","values","action","resetForm","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,QAAoC,sBAApC;;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;;AAKA,MAAMC,WAAN,SAA0BV,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCW,KADgC,GACxB,EAAC,GAAGJ;AAAJ,KADwB;AAAA,SAGhCK,WAHgC,GAGlBX,MAAM,CAAC,EAAD,CAHY;AAAA,SAIhCY,aAJgC,GAIhBZ,MAAM,CAAC,EAAD,CAJU;;AAAA,SAMhCa,kBANgC,GAMVC,KAAD,IAAW;AAC5B,YAAM;AAAEP,QAAAA,IAAF;AAAQQ,QAAAA;AAAR,UAAkBD,KAAK,CAACE,MAA9B;AACA,WAAKC,QAAL,CAAc;AACV,SAACV,IAAD,GAAQQ;AADE,OAAd;AAGH,KAX+B;;AAAA,SAahCG,aAbgC,GAahB,CAACC,MAAD,EAASC,MAAT,KAAoB,CAEhC;AACA;AACA;AACA;AACH,KAnB+B;;AAAA,SAqBhCC,SArBgC,GAqBpB,MAAM;AACd,WAAKJ,QAAL,CAAc,EACV,GAAGX;AADO,OAAd;AAGH,KAzB+B;AAAA;;AA2BhCgB,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACf,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAiB,KAAKE,KAA5B;AAEA,wBACA,QAAC,MAAD;AACA,MAAA,aAAa,EAAEJ,aADf;AAEA,MAAA,QAAQ,EAAE,KAAKY,aAFf;AAAA,6BAII,QAAC,IAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,OAAO,EAAE,KAAKP,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AACA,UAAA,EAAE,EAAE,KAAKA,WADT;AAEA,UAAA,IAAI,EAAC,MAFL;AAGA,UAAA,IAAI,EAAC,MAHL;AAIA,UAAA,KAAK,EAAEJ,IAJP;AAKA,UAAA,OAAO,EAAC,wHALR;AAMA,UAAA,KAAK,EAAC,wIANN;AAOA,UAAA,QAAQ,MAPR;AAQA,UAAA,QAAQ,EAAE,KAAKM,kBARf;AASA,UAAA,WAAW,EAAC;AATZ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAcI,QAAC,KAAD;AAAO,UAAA,OAAO,EAAE,KAAKD,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ,eAeI,QAAC,KAAD;AACA,UAAA,EAAE,EAAE,KAAKA,aADT;AAEA,UAAA,IAAI,EAAC,KAFL;AAGA,UAAA,IAAI,EAAC,QAHL;AAIA,UAAA,KAAK,EAAEJ,MAJP;AAKA,UAAA,OAAO,EAAC,wFALR;AAMA,UAAA,KAAK,EAAC,8FANN;AAOA,UAAA,QAAQ,MAPR;AAQA,UAAA,QAAQ,EAAE,KAAKK,kBARf;AASA,UAAA,WAAW,EAAC;AATZ;AAAA;AAAA;AAAA;AAAA,gBAfJ,eA2BI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YADA;AAqCH;;AAnE+B;;AAoEnC;AAED,eAAeJ,WAAf","sourcesContent":["import React, {Component} from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Formik, Form } from 'formik';\nimport { Label, Input, Button} from './ContactForm.styled';\n\nconst INITIAL_STATE = {\n    name: '',\n    number: ''\n};\n\nclass ContactForm extends Component {\n    state = {...INITIAL_STATE}\n\n    inputNameId = nanoid(12);\n    inputNumberId = nanoid(12);\n\n    inputChangeHandler = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    submitHandler = (values, action) => {\n\n        // event.preventDefault();\n        // const contact = {id: nanoid(), name: this.state.name, number: this.state.number};\n        // this.props.addContact(contact);\n        // this.resetForm();\n    }\n\n    resetForm = () => {\n        this.setState({\n            ...INITIAL_STATE\n        })\n    }\n\n    render(){\n        const {name, number} = this.state;\n\n        return (\n        <Formik\n        initialValues={INITIAL_STATE}\n        onSubmit={this.submitHandler}\n        >\n            <Form >\n                <Label htmlFor={this.inputNameId}>Name</Label>\n                <Input\n                id={this.inputNameId}\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={this.inputChangeHandler}\n                placeholder='full name'\n                />\n\n                <Label htmlFor={this.inputNumberId}>Number</Label>\n                <Input\n                id={this.inputNumberId}\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                onChange={this.inputChangeHandler}\n                placeholder=\"tellephone number\"\n                />\n\n                <Button>Add contact</Button>\n            </Form>\n        </Formik>\n            \n        )\n    }\n};\n\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}